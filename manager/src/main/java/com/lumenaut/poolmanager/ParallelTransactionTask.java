package com.lumenaut.poolmanager;

import com.lumenaut.poolmanager.DataFormats.TransactionResult;
import org.jctools.queues.atomic.SpscAtomicArrayQueue;
import org.stellar.sdk.KeyPair;

import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * @Author Luca Vignaroli
 * @Email luca@burning.it
 * @Date 20/07/2018 - 3:26 PM
 */
public class ParallelTransactionTask implements Runnable {
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //region FIELDS

    // Config
    private final ParallelTransactionTaskConfig config;

    //endregion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //region SUBCLASSES

    /**
     * Config class
     */
    public static class ParallelTransactionTaskConfig {
        // Out
        public TransactionResult finalResults;
        public AtomicLong paidTotal;
        public AtomicLong totalFees;
        public AtomicLong totalPayment;
        public AtomicLong remainingPayment;

        // Signing
        public KeyPair source;
        public KeyPair signer;
        public int channelIndex;
        public String channelAccount;
        public String channelKey;
        public AtomicInteger progress;
        public SpscAtomicArrayQueue<TransactionResult> batchQueue;
        public AtomicBoolean error;
    }

    //endregion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //region ACCESSORS

    //endregion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //region CONSTRUCTORS

    /**
     * Constructor
     */
    public ParallelTransactionTask(final ParallelTransactionTaskConfig config) {
        this.config = config;
    }

    //endregion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //region INTERFACES IMPLEMENTATIONS

    @Override
    public void run() {
        // Test
        while (config.progress.get() < 100) {
            config.progress.getAndAdd(5);

            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    //endregion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //region METHOD OVERRIDES

    //endregion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //region METHODS

    //endregion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

